<?php

namespace Tests\Feature;

use App\Models\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class AdsControllerTest extends TestCase
{
    private static $API_TOKEN_1 = '3432432rfddsfdssdf';
    private static $API_TOKEN_2 = 'sdfddsvefwbwsdb434';

    public function setUp() {

        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->where('api_token', self::$API_TOKEN_1)->first();
        if (!$user) {
        $user = new User();
        $user->name = 'testuser1';
        $user->api_token = self::$API_TOKEN_1;
        $user->email = 'email@example.com';
        $user->save();
        }
        $user = User::query()->where('api_token', self::$API_TOKEN_2)->first();
        if (!$user) {
            $user = new User();
            $user->name = 'testuser1';
            $user->api_token = self::$API_TOKEN_2;
            $user->email = 'email@example.com';
            $user->save();
        }

    }
    public function tearDown()
    {
        User::query()->where('api_token', self::$API_TOKEN_1)->first()->delete();
        User::query()->where('api_token', self::$API_TOKEN_2)->first()->delete();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testCreateAd()
    {
        // create a single ad
        $uri=sprintf('/api/ad/1?api_token=%s',self::$API_TOKEN_1);
        $newAd = ["title" => "Title 1", "description" => "Description 1", "price" => 1];
        $response = $this->withHeaders(['Accept'=>'application/json'])->json('post',$uri,$newAd);
        $response->assertStatus(200);
        $response->assertJson(['success' => 'ok']);

    }
    public function testUpdateAd()
    {
        // create ad using token 1
        $uri=sprintf('/api/ad/1?api_token=%s',self::$API_TOKEN_1);
        $newAd = ["title" => "Title 1", "description" => "Description 1", "price" => 1];
        $response = $this->withHeaders(['Accept'=>'application/json'])->json('post',$uri,$newAd);
        $response->assertStatus(200);
        $response->assertJson(['success' => 'ok']);
        $adId = $response->json('adId');

        $this->refreshApplication();

        // update previous ad with token 1
        $uri=sprintf('/api/ad/%s?api_token=%s',$adId, self::$API_TOKEN_1);
        $newAd = ["title" => "Title 1", "description" => "Description new", "price" => 1];
        $response = $this->withHeaders(['Accept'=>'application/json'])->json('put',$uri,$newAd);
        $response->assertStatus(200);
        $response->assertJson(['success' => 'ok','adId' => $adId]);

        $this->refreshApplication();

        // check if ad in the db has changed data
        $uri=sprintf('/api/ad/%s?api_token=%s',$adId, self::$API_TOKEN_1);
        $response = $this->withHeaders(['Accept'=>'application/json'])->get($uri);
        $response->assertStatus(200);
        $response->assertJson(array_merge(['id' => $adId],$newAd));
    }

    public function testFailOtherUsersAd()
    {
        // insert first ad using token 1
        $uri=sprintf('/api/ad/1?api_token=%s',self::$API_TOKEN_1);
        $firstAd = ["title" => "Title 1", "description" => "Description 1", "price" => 1];
        $response = $this->withHeaders(['Accept'=>'application/json'])->json('post',$uri,$firstAd);
        $response->assertStatus(200);
        $response->assertJson(['success' => 'ok']);
        $adId = $response->json('adId');

        $this->refreshApplication();

        // try to update ad using different token / must fail
        $uri2=sprintf('/api/ad/%s?api_token=%s',$adId, self::$API_TOKEN_2);
        $newAd = ["title" => "Title 1", "description" => "Description new", "price" => 1];
        $response2 = $this->withHeaders(['Accept'=>'application/json'])->json('put',$uri2,$newAd);
        $response2->assertStatus(401);
        $response2->assertJson(['error' => 'Matching ad not found']);

        $this->refreshApplication();

        //get original ad from the db and check if it is the same as original data
        $uri=sprintf('/api/ad/%s', $adId);
        $response3 = $this->withHeaders(['Accept'=>'application/json'])->get($uri);
        $response3->assertStatus(200);
        $response3->assertJson(array_merge($firstAd, ['id' => $adId]));
    }

    public function testGetAds()
    {
        // insert first ad using token 1
        $uri=sprintf('/api/ad/1?api_token=%s',self::$API_TOKEN_1);
        $firstAd = ["title" => "Title 1", "description" => "Description 1", "price" => 1];
        $response = $this->withHeaders(['Accept'=>'application/json'])->json('post',$uri,$firstAd);
        $response->assertStatus(200);
        $response->assertJson(['success' => 'ok']);
        $adId = $response->json('adId');

        $this->refreshApplication();

        // try to update ad using different token / must fail
        $uri2=sprintf('/api/ad/%s?api_token=%s',$adId, self::$API_TOKEN_2);
        $newAd = ["title" => "Title 1", "description" => "Description new", "price" => 1];
        $response2 = $this->withHeaders(['Accept'=>'application/json'])->json('put',$uri2,$newAd);
        $response2->assertStatus(401);
        $response2->assertJson(['error' => 'Matching ad not found']);

        $this->refreshApplication();

        //get original ad from the db and check if it is the same as original data
        $uri=sprintf('/api/ad/%s', $adId);
        $response3 = $this->withHeaders(['Accept'=>'application/json'])->get($uri);
        $response3->assertStatus(200);
        $response3->assertJson(array_merge($firstAd, ['id' => $adId]));
    }


}

